name: Gradle Build

on:
  push:

jobs:
  aws:
    environment: prod
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: AWS 로그인 (ECR)
      uses: aws-actions/amazon-ecr-login@v2
      with:
        aws-region: ${{ secrets.AWS_REGION }}

  build:
    environment: prod
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [17]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: JDK Setting
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java-version }}

      - name: Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ matrix.java-version }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ matrix.java-version }}-

      - name: Gradle 빌드 및 테스트
        run: ./gradlew clean build --no-daemon


      - name: Docker 이미지 빌드
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build \
            --build-arg JAR_FILE=build/libs/*.jar \
            -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG \
            .

      - name: Docker 이미지 푸시
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: 태그 정보 등록 (Optional)
        run: echo "IMAGE_URI=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT